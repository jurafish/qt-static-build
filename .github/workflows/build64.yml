name: build64

on: workflow_dispatch

jobs:
  GenerateWinStaticBinaries:
    runs-on: windows-2019

    steps:
    - name: Clone repository
      uses: actions/checkout@v2
    - name: Install Python 3.7 version
      uses: actions/setup-python@v1
      with:
        python-version: '3.7'
        architecture: 'x64'
    - name: Install jom
      run: |
        choco install -y jom sed
    - name: Compile static Qt version
      run: |
        # Clone Qt5 repo
        cd ..
        git clone https://code.qt.io/qt/qt5.git -b 5.15.11
        cd qt5
        perl init-repository -f --module-subset=qtdocgallery,qt3d,qtbase,qtcanvas3d,qtcharts,qtdeclarative,qtgraphicaleffects,qtimageformats,qtmultimedia,qtnetworkauth,qtquick3d,qtquickcontrols,qtquickcontrols2,qtserialbus,qtserialport,qtsvg,qtwebchannel,qtwebengine,qtwebsockets,qtwebview,qtwinextras,qtxmlpatterns
        # Create shadow build folder
        cd ..
        mkdir qt5_shadow
        cd qt5_shadow
        # Setup the compiler
        cmd.exe /c "call `"C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat`" && set > %temp%\vcvars.txt"
        Get-Content "$env:temp\vcvars.txt" | Foreach-Object { if ($_ -match "^(.*?)=(.*)$") { Set-Content "env:\$($matches[1])" $matches[2] } }
        # Configure Qt5
        ..\qt5\configure.bat -release -static -static-runtime -prefix "..\Qt5_binaries" -no-pch -optimize-size -opengl desktop -skip webengine -nomake tools -nomake tests -nomake examples -opensource -confirm-license
        jom -j4
        nmake install
    - name: Package binaries
      run: |
        # Create archive of the pre-built Qt binaries
        7z a qt5_51511_static_64.zip ..\Qt5_binaries
    - uses: actions/upload-artifact@v1
      with:
        name: qt5_51511_static_64.zip
        path: qt5_51511_static_64.zip
